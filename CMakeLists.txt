cmake_minimum_required(VERSION 3.27)
# set the project name

project(capi VERSION 1.0 LANGUAGES C CXX ASM)
include(FetchContent)

message(STATUS "🦨🦨🦨 No-OS build 🦨🦨🦨")

find_package (Python3 COMPONENTS Interpreter Development)
find_package(Git)

function(no_os_sources_ifdef feature_toggle source)
  if(${feature_toggle})
    message(STATUS "Adding ${source}")
    target_sources(capi_build PRIVATE ${source} ${ARGN})
  endif()
endfunction()

function(capi_update_config)
  include(${CMAKE_SOURCE_DIR}/config.cmake)
endfunction()

# Board specific defconfig
list(APPEND CONFIG_FILES ${DEFAULT_DEFCONFIG})
# list(APPEND CONFIG_FILES ${CMAKE_SOURCE_DIR}/projects/eval-adxl355-pmdz/project.conf)

set(NO_OS_DIR ${CMAKE_SOURCE_DIR})
set(CONFIG_FILE ${CMAKE_BINARY_DIR}/.config)
set(KCONFIG_VARS_FILE ${CMAKE_SOURCE_DIR}/config.cmake)
set(CREATE_DOTCONFIG_SCRIPT ${CMAKE_BINARY_DIR}/create_dotconfig.cmake)

add_library(capi_build STATIC)

include_directories(
        ${CMAKE_CURRENT_SOURCE_DIR}/include
)
list(APPEND GENERATE_CONFIG_ARGS "--update")
list(APPEND GENERATE_CONFIG_ARGS "--defconfig")
list(APPEND GENERATE_CONFIG_ARGS ${DEFAULT_DEFCONFIG})

target_compile_options(capi_build PRIVATE -Wall)
target_link_options(capi_build PRIVATE -Wl,--gc-sections)

add_subdirectory(projects)

# if (DEFINED ${CAPI_CURRENT_PROJECT})
#   list(APPEND GENERATE_CONFIG_ARGS ${NO_OS_DIR}/projects/${CAPI_CURRENT_PROJECT}/project.conf)
# endif()

set_property(
  DIRECTORY
  APPEND
  PROPERTY CMAKE_CONFIGURE_DEPENDS
  ${NO_OS_DIR}/projects/${CAPI_CURRENT_PROJECT}/project.conf
  ${DEFAULT_DEFCONFIG}
  ${CMAKE_SOURCE_DIR}/config.cmake
  ${CMAKE_BINARY_DIR}/.config
)

message(STATUS "Using default defconfig: ${PROJECT_DEFCONFIG}")

# if(NOT EXISTS "${KCONFIG_VARS_FILE}")
#   execute_process(
#     COMMAND ${Python3_EXECUTABLE}
#     ${CMAKE_SOURCE_DIR}/generate_config.py
#     ${GENERATE_CONFIG_ARGS}
#   )
# endif()

if(NOT EXISTS "${KCONFIG_VARS_FILE}")
  execute_process(
    COMMAND touch ${CMAKE_SOURCE_DIR}/config.cmake
  )
endif()

if (DEFINED PROJECT_DEFCONFIG)
  message(ERROR "Adding project defconfig")
  list(APPEND GENERATE_CONFIG_ARGS ${CMAKE_SOURCE_DIR}/projects/${PROJECT_DEFCONFIG})
endif()

file(WRITE ${CREATE_DOTCONFIG_SCRIPT}
"
# This script is auto-generated by CMakeLists.txt at configure time. Do not edit.

if(NOT EXISTS \"${CONFIG_FILE}\")
  message(STATUS \"Initial .config not found. Creating from default: ${DEFAULT_DEFCONFIG}\")
  # Use \${CMAKE_COMMAND} to escape the '$' so it's written literally into the file.
  # This ensures the script can call cmake when it is executed later by 'make'.
  execute_process(
      COMMAND \${CMAKE_COMMAND} -E copy
              \"${DEFAULT_DEFCONFIG}\"
              \"${CONFIG_FILE}\"
      RESULT_VARIABLE result
  )
  if(NOT result EQUAL 0)
      message(FATAL_ERROR \"Failed to create initial .config file.\")
  endif()
endif()
"
)

# --- Step 2: Create a build rule for the .config file itself ---
# This rule now executes the script we just wrote.
add_custom_command(
    OUTPUT ${CONFIG_FILE}
    # The command is now simpler. It just executes the generated script.
    COMMAND ${CMAKE_COMMAND} -P ${CREATE_DOTCONFIG_SCRIPT}
    # The rule still depends on the ultimate source files.
    DEPENDS ${DEFAULT_DEFCONFIG}
    COMMENT "Checking for .config file..."
    VERBATIM
)
add_custom_target(KconfigDotConfig
    DEPENDS ${CONFIG_FILE}
)

if(NOT EXISTS "${CONFIG_FILE}")
  execute_process(
      COMMAND ${Python3_EXECUTABLE}
      ${CMAKE_SOURCE_DIR}/generate_config.py
      ${GENERATE_CONFIG_ARGS}
  )
endif()

# add_custom_command(
#     OUTPUT ${CONFIG_FILE}
#     # The command is now simpler. It just executes the generated script.
#     COMMAND ${CMAKE_COMMAND} -P ${CREATE_DOTCONFIG_SCRIPT}
#     # The rule still depends on the ultimate source files.
#     DEPENDS ${DEFAULT_DEFCONFIG}
#     COMMENT "Checking for .config file..."
#     VERBATIM
# )

add_custom_command(
    OUTPUT ${KCONFIG_VARS_FILE}

    COMMAND ${Python3_EXECUTABLE}
    ${CMAKE_SOURCE_DIR}/generate_config.py
    ${GENERATE_CONFIG_ARGS}

    DEPENDS ${CONFIG_FILE} ${CMAKE_SOURCE_DIR}/generate_config.py
    COMMENT "Generating CMake config variables from .config"
)

include(${KCONFIG_VARS_FILE})

add_subdirectory(network)
add_subdirectory(util)
add_subdirectory(iio)
add_subdirectory(drivers)

# FetchContent_Declare(
#   googletest
#   GIT_REPOSITORY https://github.com/google/googletest.git
#   GIT_TAG        6910c9d9165801d8827d628cb72eb7ea9dd538c5 # release-1.16.0
# )

# FetchContent_MakeAvailable(googletest)

add_custom_target(KconfigVars ALL
    DEPENDS ${KCONFIG_VARS_FILE}
)

add_custom_target(
  menuconfig
  COMMAND ${Python3_EXECUTABLE} -m menuconfig
  COMMAND ${Python3_EXECUTABLE}
    ${CMAKE_SOURCE_DIR}/generate_config.py
    --update
  USES_TERMINAL
  VERBATIM
)

add_custom_target(
  distclean
  COMMAND make clean && rm -f ${CMAKE_BINARY_DIR}/.config
  VERBATIM
)

add_dependencies(capi_build KconfigVars)