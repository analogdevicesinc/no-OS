add_executable(iio_demo src/examples/iio_example/iio_example.c)
target_link_libraries(iio_demo no-os)
# target_link_libraries(iio_demo platformsdk)

target_sources(iio_demo PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src/common/common_data.c)
# target_sources(iio_demo PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src/examples/iio_example/iio_example.c)
target_sources(iio_demo PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/${PLATFORM}/main.c)
target_sources(iio_demo PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/${PLATFORM}/parameters.c)

target_include_directories(iio_demo PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/examples/iio_example)

# Just because iio_app.c includes parameters.h ...
target_include_directories(iio_demo PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/${PLATFORM})
# And parameters.h includes common_data.h
target_include_directories(iio_demo PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/common)
# And common_data.h includes platform_includes.h
target_include_directories(iio_demo PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform)

target_compile_definitions(iio_demo PRIVATE -DIIO_SUPPORT=1)
target_compile_definitions(iio_demo PRIVATE -DIIO_EXAMPLE=1)
# target_compile_definitions(iio_demo PRIVATE -DIIO_TRIGGER_EXAMPLE=0)
# target_compile_definitions(iio_demo PRIVATE -DIIO_TIMER_TRIGGER_EXAMPLE=0)

set(IIO_DEMO_CUBEMX_SOURCES
    "/mnt/drive/testing/no-OS/build/projects/iio_demo/test_build/app/Core/Src/main.c"
    "/mnt/drive/testing/no-OS/build/projects/iio_demo/test_build/app/Core/Src/gpio.c"
    "/mnt/drive/testing/no-OS/build/projects/iio_demo/test_build/app/Core/Src/stm32f4xx_it.c"
    # ... add all other files generated by iio_demo.cubemx
)

add_custom_command(
    OUTPUT ${IIO_DEMO_CUBEMX_SOURCES}
    COMMAND /home/xvr/STM32CubeMX/jre/bin/java -jar /home/xvr/STM32CubeMX/STM32CubeMX -q "/mnt/drive/testing/no-OS/projects/iio_demo/iio_demo.cubemx"
    DEPENDS "${CMAKE_CURRENT_LIST_DIR}/iio_demo.cubemx"
    COMMENT "Generating CubeMX sources for iio_demo..."
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
    VERBATIM
)

# 3. Create a helper target to represent the generation step
add_custom_target(generate_iio_demo_sources DEPENDS ${IIO_DEMO_CUBEMX_SOURCES})

# 4. Call your function, passing the list of generated sources
add_platform_sdk(platformsdk
    SOURCES  ${IIO_DEMO_CUBEMX_SOURCES}
    INCLUDE_DIRS Core/Inc Drivers/CMSIS/Include # etc
)

# 6. Link everything together
#    Link your app against the platform SDK library
target_link_libraries(iio_demo platformsdk)

#    Make the app target depend on the generator target. This ensures
#    CubeMX runs before compilation starts when you build `iio_demo`.
add_dependencies(iio_demo generate_iio_demo_sources)

add_custom_command(
    TARGET iio_demo
    POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -O ihex iio_demo.elf iio_demo.hex
    COMMENT "Generating iio_demo.hex"
)

# add_flash_target(iio_demo)
# add_platform_sdk(iio_demo)