# add_executable(iio_demo src/examples/iio_example/iio_example.c)
# target_link_libraries(iio_demo no-os)
# # target_link_libraries(iio_demo platformsdk)

# target_sources(iio_demo PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src/common/common_data.c)
# # target_sources(iio_demo PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src/examples/iio_example/iio_example.c)
# target_sources(iio_demo PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/${PLATFORM}/main.c)
# target_sources(iio_demo PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/${PLATFORM}/parameters.c)

# target_include_directories(iio_demo PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/examples/iio_example)

# # Just because iio_app.c includes parameters.h ...
# target_include_directories(iio_demo PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/${PLATFORM})
# # And parameters.h includes common_data.h
# target_include_directories(iio_demo PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/common)
# # And common_data.h includes platform_includes.h
# target_include_directories(iio_demo PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform)

# target_compile_definitions(iio_demo PRIVATE -DIIO_SUPPORT=1)
# target_compile_definitions(iio_demo PRIVATE -DIIO_EXAMPLE=1)
# # target_compile_definitions(iio_demo PRIVATE -DIIO_TRIGGER_EXAMPLE=0)
# # target_compile_definitions(iio_demo PRIVATE -DIIO_TIMER_TRIGGER_EXAMPLE=0)

# set(IIO_DEMO_CUBEMX_SOURCES
#     "/mnt/drive/testing/no-OS/build/projects/iio_demo/test_build/app/Core/Src/main.c"
#     "/mnt/drive/testing/no-OS/build/projects/iio_demo/test_build/app/Core/Src/gpio.c"
#     "/mnt/drive/testing/no-OS/build/projects/iio_demo/test_build/app/Core/Src/stm32f4xx_it.c"
#     # ... add all other files generated by iio_demo.cubemx
# )

# add_custom_command(
#     OUTPUT ${IIO_DEMO_CUBEMX_SOURCES}
#     COMMAND /home/xvr/STM32CubeMX/jre/bin/java -jar /home/xvr/STM32CubeMX/STM32CubeMX -q "/mnt/drive/testing/no-OS/projects/iio_demo/iio_demo.cubemx"
#     COMMAND ${CMAKE_COMMAND} .
#     DEPENDS "${CMAKE_CURRENT_LIST_DIR}/iio_demo.cubemx"
#     COMMENT "Generating CubeMX sources for iio_demo..."
#     WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
#     VERBATIM
# )

# # 3. Create a helper target to represent the generation step
# add_custom_target(generate_iio_demo_sources DEPENDS ${IIO_DEMO_CUBEMX_SOURCES})

# # 4. Call your function, passing the list of generated sources
# add_platform_sdk(platformsdk
#     SOURCES  ${IIO_DEMO_CUBEMX_SOURCES}
#     INCLUDE_DIRS Core/Inc Drivers/CMSIS/Include # etc
# )

# # 6. Link everything together
# #    Link your app against the platform SDK library
# target_link_libraries(iio_demo platformsdk)

# #    Make the app target depend on the generator target. This ensures
# #    CubeMX runs before compilation starts when you build `iio_demo`.
# add_dependencies(iio_demo generate_iio_demo_sources)

# add_custom_command(
#     TARGET iio_demo
#     POST_BUILD
#     COMMAND ${CMAKE_OBJCOPY} -O ihex iio_demo.elf iio_demo.hex
#     COMMENT "Generating iio_demo.hex"
# )

# # add_flash_target(iio_demo)
# # add_platform_sdk(iio_demo)

# The name of the project as defined in your .ioc file.
# CubeMX will use this name for the target it creates in its generated CMakeLists.txt.
set(CUBEMX_PROJECT_NAME "STM32_Drivers") # You might need to adjust this name

# The directory where CubeMX will generate the project.
set(GENERATED_PROJECT_DIR "${CMAKE_BINARY_DIR}/test_build/app")

# --- Step 1: Create a Custom Target to Run CubeMX ---
# This target's only job is to generate the entire subproject.
add_custom_target(generate_cubemx_project
    # Ensure the output directory is clean before generating
    # COMMAND ${CMAKE_COMMAND} -E rm -rf "${GENERATED_PROJECT_DIR}"
    # Run CubeMX, telling it to output into our specific directory
    COMMAND /home/xvr/STM32CubeMX/jre/bin/java -jar /home/xvr/STM32CubeMX/STM32CubeMX -q "/mnt/drive/testing/no-OS/projects/iio_demo/iio_demo.cubemx"
    COMMAND ${CMAKE_COMMAND}
        -D CMAKE_FILE_TO_PATCH=${CMAKE_BINARY_DIR}/test_build/app/cmake/stm32cubemx/CMakeLists.txt
        -P "${CMAKE_SOURCE_DIR}/cmake/stm32_patch_cubemx.cmake"
    # COMMAND ${CMAKE_COMMAND} -S ${CMAKE_SOURCE_DIR} -B ${CMAKE_BINARY_DIR}

    COMMENT "Generating STM32CubeMX project..."
)

# add_custom_target(generate_cubemx_project
#     # The COMMAND is now the cmake executable itself...
#     COMMAND ${CMAKE_COMMAND}
#             # ...passing variables and the script path.
#             -P ${CMAKE_SOURCE_DIR}/cmake/run_stm32cubemx_generator.cmake
            
#     COMMENT "Generating STM32CubeMX project (quietly)..."
#     VERBATIM
# )

# --- Step 2: Define Your Application Executable ---
# This target includes ONLY your handwritten source files.
add_executable(iio_demo
    ${CMAKE_CURRENT_SOURCE_DIR}/src/examples/iio_example/iio_example.c
    ${CMAKE_CURRENT_SOURCE_DIR}/src/common/common_data.c
    ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/${PLATFORM}/main.c
    ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/${PLATFORM}/parameters.c
)

# target_link_libraries(no-os stm32cubemx)
# target_link_libraries(iio_demo PRIVATE no-os)

# --- Step 4: Add Other Properties to Your Application ---
# These are applied to the final 'iio_demo' target.
target_include_directories(iio_demo PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/src/examples/iio_example
    ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/${PLATFORM}
    ${CMAKE_CURRENT_SOURCE_DIR}/src/common
    ${CMAKE_CURRENT_SOURCE_DIR}/src/platform
)

target_link_libraries(iio_demo no-os ${CUBEMX_PROJECT_NAME})
target_link_options(iio_demo PRIVATE -T${CMAKE_BINARY_DIR}/test_build/app/STM32F469XX_FLASH.ld)

# --- Step 3: Conditionally Link the Generated Project ---
# This is the key part. We check if the generated project exists.
# if(EXISTS "${GENERATED_PROJECT_DIR}/CMakeLists.txt")
#     # If it exists, we know we are on the second `make` run.
#     # We include the generated project, which makes its targets available.
#     add_subdirectory(${GENERATED_PROJECT_DIR}/cmake/stm32cubemx ${GENERATED_PROJECT_DIR}/cmake/stm32cubemx/build)

#     # target_link_libraries(no-os )

#     target_link_options(iio_demo PRIVATE -T${CMAKE_BINARY_DIR}/test_build/app/STM32F469XX_FLASH.ld)
#     # Now we link our application against the library target from the generated project.
#     target_link_libraries(iio_demo no-os ${CUBEMX_PROJECT_NAME})
# else()
#     # If it doesn't exist, this is the first `make` run.
#     # We create a dependency that forces the generator to run.
#     add_dependencies(iio_demo generate_cubemx_project)
# endif()

target_compile_definitions(iio_demo PRIVATE
    -DIIO_SUPPORT=1
    -DIIO_EXAMPLE=1
    -DSTM32_PLATFORM=1
)

add_custom_command(
    TARGET iio_demo
    POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -O ihex $<TARGET_FILE:iio_demo> iio_demo.hex
    COMMENT "Generating iio_demo.hex"
)