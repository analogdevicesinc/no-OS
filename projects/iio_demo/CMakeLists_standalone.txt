cmake_minimum_required(VERSION 3.28)

# Auto-detect build context and include no-OS
if(DEFINED NO_OS_PATH AND EXISTS "${NO_OS_PATH}")
    # Out-of-tree build with local no-OS
    message(STATUS "Using local no-OS from: ${NO_OS_PATH}")
    set(CMAKE_TOOLCHAIN_FILE ${NO_OS_PATH}/drivers/platform/${PLATFORM}/toolchain.cmake)
    add_subdirectory(${NO_OS_PATH} ${CMAKE_BINARY_DIR}/no-os-core-build)

elseif(EXISTS "${CMAKE_SOURCE_DIR}/../../drivers")
    # In-tree build (project is in projects/ subdirectory)
    message(STATUS "In-tree build detected")
    set(NO_OS_ROOT "${CMAKE_SOURCE_DIR}/../..")
    set(CMAKE_TOOLCHAIN_FILE ${NO_OS_ROOT}/drivers/platform/${PLATFORM}/toolchain.cmake)
    add_subdirectory(${NO_OS_ROOT} ${CMAKE_BINARY_DIR}/no-os-core-build)

else()
    # Out-of-tree build with FetchContent
    message(STATUS "FetchContent build - downloading no-OS...")
    include(FetchContent)
    set(FETCHCONTENT_UPDATES_DISCONNECTED ON)
    FetchContent_Declare(
        no-os-core
        GIT_REPOSITORY https://github.com/analogdevicesinc/no-OS.git
        GIT_TAG dev/cmake
        GIT_SHALLOW TRUE
        GIT_SUBMODULES ""
    )

    set(FETCHCONTENT_QUIET OFF)
    FetchContent_MakeAvailable(no-os-core)
    set(CMAKE_TOOLCHAIN_FILE ${no-os-core_SOURCE_DIR}/drivers/platform/${PLATFORM}/toolchain.cmake)
endif()

project(iio-demo VERSION 1.0 LANGUAGES C CXX ASM)

# Build the iio_demo target
add_executable(iio_demo
    ${CMAKE_CURRENT_SOURCE_DIR}/src/examples/iio_example/iio_example.c
    ${CMAKE_CURRENT_SOURCE_DIR}/src/common/common_data.c
    ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/${PLATFORM}/main.c
    ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/${PLATFORM}/parameters.c
)

config_platform_sdk(iio_demo)
add_flash_target(iio_demo)
post_build_config(iio_demo)

target_include_directories(iio_demo PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/src/examples/iio_example
    ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/${PLATFORM}
    ${CMAKE_CURRENT_SOURCE_DIR}/src/common
    ${CMAKE_CURRENT_SOURCE_DIR}/src/platform
)

target_link_libraries(iio_demo no-os)

target_compile_definitions(iio_demo PRIVATE
    -DIIO_SUPPORT=1
    -DIIO_EXAMPLE=1
)

add_custom_command(
    TARGET iio_demo
    POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -O ihex $<TARGET_FILE:iio_demo> iio_demo.hex
    COMMENT "Generating iio_demo.hex"
)