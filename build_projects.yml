trigger:
- main
- next_stable
- 20*

pr:
- main
- next_stable
- 20*

variables:
- group: noos_releases_group_variables
- name: isMain
  value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
- name: isNextStable
  value:  $[eq(variables['Build.SourceBranch'], 'refs/heads/next_stable')]
- name: isRelease
  value: $[contains(variables['Build.SourceBranch'], 'refs/heads/20')]

- ${{ if eq(variables['Build.Reason'], 'PullRequest')}}:
  - name: branch
    value: $(System.PullRequest.TargetBranchName)
- ${{ else }}:
  - name: branch
    value: $(Build.SourceBranchName)

jobs:
- job: CheckLabel
  pool:
    vmImage: ubuntu-latest
  steps:
  - bash: |
      sudo apt install curl
      if curl -s "https://api.github.com/repos/$BUILD_REPOSITORY_ID/issues/$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER/labels" | grep '"name": "documentation"'
      then
        echo "##vso[task.setvariable variable=prHasLabel;isOutput=true]true"
        echo "[INFO] documentation label found, skipping build!"
      fi
    displayName: Check for documentation label on PR
    condition: eq(variables['Build.Reason'], 'PullRequest')
    name: checkPrLabel

- job: Xilinx
  dependsOn: CheckLabel
  condition: or(not(eq(variables['Build.Reason'], 'PullRequest')), not(eq(dependencies.build_and_static_validation.outputs['checkPrLabel.prHasLabel'], true)))
  timeoutInMinutes: 200
  pool:
    name: Default
    demands:
      - agent.name -equals no-OS_xilinx
  steps:
  - checkout: self
    fetchDepth: 50
    submodules: true
    clean: true
    persistCredentials: true
  - script: |
      export BRANCH=$(branch)
      python3 ./tools/scripts/build_projects.py $(Build.Repository.LocalPath) \
        -export_dir $(RELEASE_DIR) \
        -log_dir $(LOG_DIR) \
        -builds_dir /no-OS_builds/builds \
        -platform xilinx \
        -hdl_branch $(HDL_BRANCH)
    displayName: 'Run project build'
  - task: PublishPipelineArtifact@1
    timeoutInMinutes: 10
    condition: or(eq(variables.isMain, true), eq(variables.isNextStable, true), eq(variables.isRelease, true))
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/$(RELEASE_DIR)'
      artifact: '$(ARTIFACT_NAME)_Xilinx'
      publishLocation: 'pipeline'
  - task: PublishPipelineArtifact@1
    condition: true
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/$(LOG_DIR)'
      artifact: 'logs_Xilinx_$(System.JobId)'
      publishLocation: 'pipeline'

- job: STM32
  dependsOn: CheckLabel
  condition: or(not(eq(variables['Build.Reason'], 'PullRequest')), not(eq(dependencies.build_and_static_validation.outputs['checkPrLabel.prHasLabel'], true)))
  timeoutInMinutes: 200
  pool:
    name: Default
    demands:
      - agent.name -equals no-OS
  steps:
  - checkout: self
    fetchDepth: 50
    submodules: true
    clean: true
    persistCredentials: true
  - script: 'python3 ./tools/scripts/build_projects.py $(Build.Repository.LocalPath)
               -export_dir $(RELEASE_DIR)
               -log_dir $(LOG_DIR)
               -builds_dir /no-OS_builds/builds
               -platform stm32
               -hdl_branch $(HDL_BRANCH)'
    displayName: 'Run project build'
  - task: PublishPipelineArtifact@1
    timeoutInMinutes: 10
    condition: or(eq(variables.isMain, true), eq(variables.isNextStable, true), eq(variables.isRelease, true))
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/$(RELEASE_DIR)'
      artifact: '$(ARTIFACT_NAME)_STM32'
      publishLocation: 'pipeline'
  - task: PublishPipelineArtifact@1
    condition: true
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/$(LOG_DIR)'
      artifact: 'logs_STM32_$(System.JobId)'
      publishLocation: 'pipeline'

- job: Maxim
  dependsOn: CheckLabel
  condition: or(not(eq(variables['Build.Reason'], 'PullRequest')), not(eq(dependencies.build_and_static_validation.outputs['checkPrLabel.prHasLabel'], true)))
  timeoutInMinutes: 200
  pool:
    name: Default
    demands:
      - agent.name -equals no-OS
  steps:
  - checkout: self
    fetchDepth: 50
    submodules: true
    clean: true
    persistCredentials: true
  - script: 'python3 ./tools/scripts/build_projects.py $(Build.Repository.LocalPath)
               -export_dir $(RELEASE_DIR)
               -log_dir $(LOG_DIR)
               -builds_dir /no-OS_builds/builds
               -platform maxim
               -hdl_branch $(HDL_BRANCH)'
    displayName: 'Run project build'
  - task: PublishPipelineArtifact@1
    timeoutInMinutes: 10
    condition: or(eq(variables.isMain, true), eq(variables.isNextStable, true), eq(variables.isRelease, true))
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/$(RELEASE_DIR)'
      artifact: '$(ARTIFACT_NAME)_Maxim'
      publishLocation: 'pipeline'
  - task: PublishPipelineArtifact@1
    condition: true
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/$(LOG_DIR)'
      artifact: 'logs_Maxim_$(System.JobId)'
      publishLocation: 'pipeline'

- job: Mbed
  dependsOn: CheckLabel
  condition: or(not(eq(variables['Build.Reason'], 'PullRequest')), not(eq(dependencies.build_and_static_validation.outputs['checkPrLabel.prHasLabel'], true)))
  timeoutInMinutes: 200
  pool:
    name: Default
    demands:
      - agent.name -equals no-OS
  steps:
  - checkout: self
    fetchDepth: 50
    submodules: true
    clean: true
    persistCredentials: true
  - script: 'python3 ./tools/scripts/build_projects.py $(Build.Repository.LocalPath)
               -export_dir $(RELEASE_DIR)
               -log_dir $(LOG_DIR)
               -builds_dir /no-OS_builds/builds
               -platform mbed
               -hdl_branch $(HDL_BRANCH)'
    displayName: 'Run project build'
  - task: PublishPipelineArtifact@1
    timeoutInMinutes: 10
    condition: or(eq(variables.isMain, true), eq(variables.isNextStable, true), eq(variables.isRelease, true))
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/$(RELEASE_DIR)'
      artifact: '$(ARTIFACT_NAME)_Mbed'
      publishLocation: 'pipeline'
  - task: PublishPipelineArtifact@1
    condition: true
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/$(LOG_DIR)'
      artifact: 'logs_Mbed_$(System.JobId)'
      publishLocation: 'pipeline'

- job: Pico
  dependsOn: CheckLabel
  condition: or(not(eq(variables['Build.Reason'], 'PullRequest')), not(eq(dependencies.build_and_static_validation.outputs['checkPrLabel.prHasLabel'], true)))
  timeoutInMinutes: 200
  pool:
    name: Default
    demands:
      - agent.name -equals no-OS
  steps:
  - checkout: self
    fetchDepth: 50
    submodules: true
    clean: true
    persistCredentials: true
  - script: 'python3 ./tools/scripts/build_projects.py $(Build.Repository.LocalPath)
               -export_dir $(RELEASE_DIR)
               -log_dir $(LOG_DIR)
               -builds_dir /no-OS_builds/builds
               -platform pico
               -hdl_branch $(HDL_BRANCH)'
    displayName: 'Run project build'
  - task: PublishPipelineArtifact@1
    timeoutInMinutes: 10
    condition: or(eq(variables.isMain, true), eq(variables.isNextStable, true), eq(variables.isRelease, true))
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/$(RELEASE_DIR)'
      artifact: '$(ARTIFACT_NAME)_Pico'
      publishLocation: 'pipeline'
  - task: PublishPipelineArtifact@1
    condition: true
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/$(LOG_DIR)'
      artifact: 'logs_Pico_$(System.JobId)'
      publishLocation: 'pipeline'

- job: ADuCM3029
  dependsOn: CheckLabel
  condition: or(not(eq(variables['Build.Reason'], 'PullRequest')), not(eq(dependencies.build_and_static_validation.outputs['checkPrLabel.prHasLabel'], true)))
  timeoutInMinutes: 200
  pool:
    name: Default
    demands:
      - agent.name -equals no-OS
  steps:
  - checkout: self
    fetchDepth: 50
    submodules: true
    clean: true
    persistCredentials: true
  - script: 'python3 ./tools/scripts/build_projects.py $(Build.Repository.LocalPath)
               -export_dir $(RELEASE_DIR)
               -log_dir $(LOG_DIR)
               -builds_dir /no-OS_builds/builds
               -platform aducm3029
               -hdl_branch $(HDL_BRANCH)'
    displayName: 'Run project build'
  - task: PublishPipelineArtifact@1
    timeoutInMinutes: 10
    condition: or(eq(variables.isMain, true), eq(variables.isNextStable, true), eq(variables.isRelease, true))
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/$(RELEASE_DIR)'
      artifact: '$(ARTIFACT_NAME)_ADuCM3029'
      publishLocation: 'pipeline'
  - task: PublishPipelineArtifact@1
    condition: true
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/$(LOG_DIR)'
      artifact: 'logs_ADuCM3029_$(System.JobId)'
      publishLocation: 'pipeline'

- job: Unit_tests
  dependsOn: CheckLabel
  condition: or(not(eq(variables['Build.Reason'], 'PullRequest')), not(eq(dependencies.build_and_static_validation.outputs['checkPrLabel.prHasLabel'], true)))
  pool:
    vmImage: ubuntu-latest
  steps:
  - checkout: self
    fetchDepth: 50
    submodules: true
    clean: true
    persistCredentials: true
  - script: |
      sudo apt install ruby-full
      sudo gem install ceedling
      pip install gcovr==4.1
      cd tests/drivers/imu/
      ceedling test:all
    displayName: 'Run unit tests'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'tests/drivers/imu/build/artifacts/test/*.xml'
